# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:

    def inorderSuccessorPredeccsor(self, root: 'TreeNode', p: 'TreeNode') -> 'TreeNode':
        """
        To find successor and predecssor both
        """
        """
        We will do a reverse inorder traversal and keep the track of current visited node. 
        Once we found the element, last tracked element would be our answer.

        """
        last_tracked_node = None
        succ, pred, is_pred = None, None, False
        
        def reverse_inorder(node):
            nonlocal last_tracked_node, is_pred, pred, succ
            
            if node is None: 
                return None
            
            reverse_inorder(node.right)
            
            if is_pred:
                pred = node
        
            if node.val == p.val:
                succ = last_tracked_node
                is_pred = True
            last_tracked_node = node
            reverse_inorder(node.left)
            
        reverse_inorder(root)
        print("Pred={} | Node={} | Succ={} ".format(pred and pred.val, p and p.val, succ and succ.val))
        return succ
            
            
